{"version":3,"sources":["TopNavigation/TopNavigation.tsx","Login/Login.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["TopNavigation","Navbar","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","NavDropdown","title","Item","Login","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","span","offset","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAKaA,EAAgB,WAC3B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAOC,OAAR,CAAeC,gBAAc,qBAC7B,kBAACF,EAAA,EAAOG,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,QACA,kBAACC,EAAA,EAAD,CAAaC,MAAM,SAASN,GAAG,sBAC7B,kBAACK,EAAA,EAAYE,KAAb,CAAkBH,KAAK,eAAvB,WACA,kBAACC,EAAA,EAAYE,KAAb,CAAkBH,KAAK,eAAvB,iBACA,kBAACC,EAAA,EAAYE,KAAb,CAAkBH,KAAK,eAAvB,UACA,kBAACC,EAAA,EAAYE,KAAb,CAAkBH,KAAK,eAAvB,YAEF,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,YAAf,e,gCCZGI,EAAQ,WACnB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,SAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,IACP,kBAACP,EAAA,EAAKS,QAAN,CAAcC,KAAK,QAAQC,YAAY,WAEzC,kBAACX,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,YAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,IACP,kBAACP,EAAA,EAAKS,QAAN,CAAcC,KAAK,WAAWC,YAAY,eAI9C,kBAACX,EAAA,EAAKC,MAAN,CAAYC,GAAIC,KACd,kBAACK,EAAA,EAAD,CAAKD,GAAI,CAAEK,KAAM,GAAIC,OAAQ,IAC3B,kBAACC,EAAA,EAAD,CAAQJ,KAAK,UAAb,eCdUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,mBCFa,WAC3B,OACE,oCACE,kBAAC,EAAD,MACA,yBAAK5B,UAAU,8BACb,yBAAKA,UAAU,SACb,qDACA,kBAAC,EAAD,WDLM,MAAS6B,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.318e4bc7.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n\nexport const TopNavigation = () => {\n  return (\n    <Navbar>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <NavDropdown title=\"Manage\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">Schemes</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">Organisations</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.3\">Groups</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.4\">Members</NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link href=\"#reports\">Reports</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const Login = () => {\n  return (\n    <Form>\n      <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n        <Form.Label column sm={2}>\n          Email\n        </Form.Label>\n        <Col sm={10}>\n          <Form.Control type=\"email\" placeholder=\"Email\" />\n        </Col>\n        <Form.Label column sm={2}>\n          Password\n        </Form.Label>\n        <Col sm={10}>\n          <Form.Control type=\"password\" placeholder=\"Password\" />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row}>\n        <Col sm={{ span: 10, offset: 5 }}>\n          <Button type=\"submit\">Sign in</Button>\n        </Col>\n      </Form.Group>\n    </Form>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { TopNavigation } from \"./TopNavigation/TopNavigation\";\nimport { Login } from \"./Login/Login\";\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <TopNavigation/>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-4\">\n          <h1>Eco Rewards Hub Admin</h1>\n          <Login/>\n        </div>\n      </div>\n    </>\n  );\n};\n"],"sourceRoot":""}